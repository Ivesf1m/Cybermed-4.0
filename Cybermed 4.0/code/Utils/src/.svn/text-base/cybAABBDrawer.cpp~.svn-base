#include "cybAABBDrawer.h"

CybAABBDrawer::CybAABBDrawer(CybVector3D<float>& center, CybVector3D<float>& sizes, CybVector3D<float>& scale, CybVector3D<float>& trans)
{
	this->center = center;
	this->sizes = sizes;
	this->scale = scale;
	this->translation = translation;
	CybBoxHolder::getInstance()->addBox(this);
}

void CybAABBDrawer::drawBox()
{
	glPushMatrix();
	glTranslated(translation[0], translation[1], translation[2]);
      	glScaled(scale[0], scale[1], scale[2]);
	glColor3d(0,0,1);
	glBegin(GL_LINE_LOOP);
		glVertex3d(center[0] - fabs(sizes[0]), center[1] + fabs(sizes[1]), center[2] - fabs(sizes[2]));
		glVertex3d(center[0] - fabs(sizes[0]), center[1] - fabs(sizes[1]), center[2] - fabs(sizes[2]));
		glVertex3d(center[0] + fabs(sizes[0]), center[1] - fabs(sizes[1]), center[2] - fabs(sizes[2]));
		glVertex3d(center[0] + fabs(sizes[0]), center[1] + fabs(sizes[1]), center[2] - fabs(sizes[2]));
	glEnd();
	glBegin(GL_LINE_LOOP);
		glVertex3d(center[0] - fabs(sizes[0]), center[1] + fabs(sizes[1]), center[2] - fabs(sizes[2]));
		glVertex3d(center[0] - fabs(sizes[0]), center[1] - fabs(sizes[1]), center[2] - fabs(sizes[2]));
		glVertex3d(center[0] - fabs(sizes[0]), center[1] - fabs(sizes[1]), center[2] + fabs(sizes[2]));
		glVertex3d(center[0] - fabs(sizes[0]), center[1] + fabs(sizes[1]), center[2] + fabs(sizes[2]));
	glEnd();
	glBegin(GL_LINE_LOOP);
		glVertex3d(center[0] + fabs(sizes[0]), center[1] + fabs(sizes[1]), center[2] - fabs(sizes[2]));
		glVertex3d(center[0] + fabs(sizes[0]), center[1] - fabs(sizes[1]), center[2] - fabs(sizes[2]));
		glVertex3d(center[0] + fabs(sizes[0]), center[1] - fabs(sizes[1]), center[2] + fabs(sizes[2]));
		glVertex3d(center[0] + fabs(sizes[0]), center[1] + fabs(sizes[1]), center[2] + fabs(sizes[2]));
	glEnd();
	glBegin(GL_LINE_LOOP);
		glVertex3d(center[0] - fabs(sizes[0]), center[1] - fabs(sizes[1]), center[2] - fabs(sizes[2]));
		glVertex3d(center[0] - fabs(sizes[0]), center[1] - fabs(sizes[1]), center[2] + fabs(sizes[2]));
		glVertex3d(center[0] + fabs(sizes[0]), center[1] - fabs(sizes[1]), center[2] + fabs(sizes[2]));
		glVertex3d(center[0] + fabs(sizes[0]), center[1] - fabs(sizes[1]), center[2] - fabs(sizes[2]));
	glEnd();
	glBegin(GL_LINE_LOOP);
		glVertex3d(center[0] - fabs(sizes[0]), center[1] + fabs(sizes[1]), center[2] - fabs(sizes[2]));
		glVertex3d(center[0] - fabs(sizes[0]), center[1] + fabs(sizes[1]), center[2] + fabs(sizes[2]));
		glVertex3d(center[0] + fabs(sizes[0]), center[1] + fabs(sizes[1]), center[2] + fabs(sizes[2]));
		glVertex3d(center[0] + fabs(sizes[0]), center[1] + fabs(sizes[1]), center[2] - fabs(sizes[2]));
	glEnd();
	glBegin(GL_LINE_LOOP);
		glVertex3d(center[0] - fabs(sizes[0]), center[1] + fabs(sizes[1]), center[2] + fabs(sizes[2]));
		glVertex3d(center[0] - fabs(sizes[0]), center[1] - fabs(sizes[1]), center[2] + fabs(sizes[2]));
		glVertex3d(center[0] + fabs(sizes[0]), center[1] - fabs(sizes[1]), center[2] + fabs(sizes[2]));
		glVertex3d(center[0] + fabs(sizes[0]), center[1] + fabs(sizes[1]), center[2] + fabs(sizes[2]));
	glEnd();
	glPopMatrix();
}

CybVector3D<float>& CybAABBDrawer::getCenter()
{
	return center;
}

CybVector3D<float>& CybAABBDrawer::getScale()
{
	return scale;
}

CybVector3D<float>& CybAABBDrawer::getSizes()
{
	return sizes;
}

CybVector3D<float>& CybAABBDrawer::getTranslation()
{
	return translation;
}

void CybAABBDrawer::setCenter(CybVector3D<float>& center)
{
	this->center = center;
}

void CybAABBDrawer::setScale(CybVector3D<float>& scale)
{
	this->scale = scale;
}

void CybAABBDrawer::setSizes(CybVector3D<float>& sizes)
{
	this->sizes = sizes;
}

void CybAABBDrawer::setTranslation(CybVector3D<float>& translation)
{
	this->translation = translation;
}
